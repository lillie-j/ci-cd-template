name: Docker Build
description: Builds a Docker Image

inputs:
  docker-context-path:
    description: The folder (path written relative to repo root) in which the Dockerfile/build context
    required: true
  build-platform:
    description: Target platform for your docker image (defaults to linux/amd64)
    required: false
    default: "linux/amd64"
  cloud-registry:
    description: Cloud container registry to push to (azure, aws)
    required: false
    default: "none"
  azure-registry-name:
    description: Name of container registry (only if azure)
    required: false
    default: "none"

runs:
  using: "composite"
  steps:


  - name: Validate cloud-registry
    shell: bash
    run: |
      valid_cloud_registries=("aws" "azure" "none")
      valid=false
      for item in "${valid_cloud_registries[@]}"; do
        if [[ "${{inputs.cloud-registry}}" == "$item" ]];then
          valid=true
          break
        fi
      done

      if ! $valid; then
        echo "${{ inputs.cloud-registry}} must be one of azure, aws or none"
        exit 1
      fi

  - name: Validate Docker Context Path
    shell: bash
    run: |
      CONTEXT="${{ inputs.docker-context-path }}"

      if [ ! -d "$CONTEXT" ]; then
        echo "Error: '$CONTEXT' is not a valid directory"
        exit 1
      fi

      if [ ! -f "$CONTEXT/Dockerfile" ]; then
        echo "Error: No Dockerfile found in '$CONTEXT'"
        exit 1
      fi

    - name: Configure AWS credentials
      if: ${{ inputs.cloud-registry == 'aws' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to ECR
      if: ${{ inputs.cloud-registry == 'aws'}}
      id: login-ecr
      uses:  aws-actions/amazon-ecr-login@v2

    - name: Login to Azure
      uses: azure/login@v2
      if: ${{ inputs.cloud-registry == 'azure' }}
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

    - name: Login to ACR
      if: ${{ inputs.cloud-registry == 'azure' }}
      shell: bash
      run: az acr login --name ${{ inputs.azure-registry-name }}


    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Generate Docker Tag
      id: set_tag
      shell: bash
      run: |
        BRANCH=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        BUILD_CONTEXT_RELATIVE_FOLDER=$(basename "${{ inputs.docker-context-path }}")
        REPO_NAME=$(echo "${{ github.repository }}"" | cut -d'/' -f2)
        TAG="${REPO_NAME}-${BUILD_CONTEXT_RELATIVE_FOLDER}-${BRANCH}-${SHORT_SHA}"

        echo "Generated Tag: $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV

    - name: Build and tag Docker image
      if: ${{ inputs.cloud-registry == 'none'}}
      shell: bash
      run: |
        docker buildx build \
          --platform "${{ inputs.build-platform }}" \
          --tag "${{ env.TAG }}" \
          --file "${{ inputs.docker-context-path }}/Dockerfile" \
          "${{ inputs.docker-context-path }}" \
          --load

        docker save "${{ env.TAG }}" -o "${{ env.TAG }}.tar"
        gzip "${{ env.TAG }}.tar"

    - name: Build and tag Docker image (AWS)
      if: ${{ inputs.cloud-registry == 'aws'}}
      shell: bash
      run: |
        ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
    
        docker buildx build \
          --platform "${{ inputs.build-platform }}" \
          --tag "$ECR_REGISTRY/${{ env.TAG }}" \
          --file "${{ inputs.docker-context-path }}/Dockerfile" \
          "${{ inputs.docker-context-path }}" \
          --load

        docker push "$ECR_REGISTRY/${{ env.TAG }}"


    - name: Build and tag Docker image (Azure)
      if: ${{ inputs.cloud-registry == 'azure'}}
      shell: bash
      run: |
        ACR_REGISTRY="${{ inputs.azure-registry-name }}.azurecr.io"
    
        docker buildx build \
          --platform "${{ inputs.build-platform }}" \
          --tag "$ACR_REGISTRY/${{ env.TAG }}" \
          --file "${{ inputs.docker-context-path }}/Dockerfile" \
          "${{ inputs.docker-context-path }}" \
          --load

        docker push "$ACR_REGISTRY/${{ env.TAG }}"


    - name: Upload Image
      if: ${{ inputs.cloud-registry == 'none'}}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.TAG }}
        path: ${{ env.TAG }}.tar.gz
        if-no-files-found: ignore
