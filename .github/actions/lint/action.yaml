name: 'Lint (Flake8 & Pylint)'
description: Lints Python code using Flake8 & PyLint. Outputs a pylint score badge as an artifact.
inputs:
  folders-to-exclude:
    description: Folders in repo to exclude from linting
    required: true
    default: 'tests,.venv'
  ignore-failures:
    description: Set to 'true' to not fail if linters detect issues, 'false' to fail if linters detect issues.
    required: true
    default: 'true'
runs:
  using: "composite"
  steps:
    - name: Lint Code (Flake 8)
      shell: bash
      run: |
            source .venv/bin/activate
            if [[ "${{ inputs.ignore-failures }}" == "true" ]]; then
              flake8 . --exclude="${{ inputs.folders-to-exclude}}" --exit-zero
            elif [[ "${{ inputs.ignore-failures }}" == "false" ]]; then
              flake8 . --exclude="${{ inputs.folders-to-exclude}}"
            else
              echo "ignore-failures must be either 'true' or 'false'"
              exit 1
            fi


    - name: Lint Code (Pylint)
      shell: bash
      run: |
            source .venv/bin/activate
            if [[ "${{ inputs.ignore-failures }}" == "true" ]]; then
               pylint . --ignore="${{ inputs.folders-to-exclude}}" | tee pylint.log || true
            elif [[ "${{ inputs.ignore-failures }}" == "false" ]]; then
              #Exit code of pipeline is last command, - tee should return 0. Need to fail pipeline if pylint does not return 0.
              pylint . --ignore="${{ inputs.folders-to-exclude}}" | tee pylint.log
              EXIT_CODE=${PIPESTATUS[0]}
              if [[ $EXIT_CODE -ne 0 ]]; then
               exit $EXIT_CODE
              fi
            else
              echo "ignore-failures must be either 'true' or 'false'"
              exit 1
            fi

            SCORE=$(grep "Your code has been rated at" pylint.log | awk '{print $7}' | cut -d'/' -f1)
            COLOR="red"
            if (( $(echo "$SCORE >=9" | bc -l) )); then
              COLOR="green"
            elif (( $(echo "$SCORE >=7" | bc -l ) )); then
              COLOR="yellow"
            elif (( $(echo "$SCORE >=5" | bc -l) )); then
              COLOR="orange"  
            elif (( $(echo "$SCORE <5" | bc -l) )); then
              COLOR="red"
            fi

            python -m pybadges \
            --left-text="pylint" \
            --right-text=$SCORE \
            --right-color=$COLOR \
            > pylint-badge.svg

    - name: Upload Pylint Score Badge
      uses: actions/upload-artifact@v4
      with:
        name: pylint-badge-${{ github.ref_name }}-${{ github.run_id}}.svg
        path: pylint-badge.svg
        if-no-files-found: ignore

  