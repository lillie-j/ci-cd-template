# This workflow is intended for Python projects managed using uv & pyproject.toml.
# This workflow installs Python dependencies, runs tests,
# lints, and performs a limited security scan using Bandit.

name: CI (UV Managed Projects)

on:
  workflow_dispatch:

jobs:
  Setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect Python Version
        id: python
        uses: ./.github/actions/detect_python
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.python.outputs.version }}

      - name: Install Dependencies
        uses: ./.github/actions/install_dependencies
        with:
          dependency-manager: 'uv' 
        

  Test:
    needs: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo & restore environment
        uses: ./.github/actions/checkout_repo_restore_env
        with:
          dependency-manager: 'uv'

      - name: Run Tests
        uses: ./.github/actions/test


  Security-Scan:
    needs: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo & restore environment
        uses: ./.github/actions/checkout_repo_restore_env
        with:
          dependency-manager: 'uv'

      - name: Run Bandit Scan
        uses: ./.github/actions/scan
        with:
          exclude-folders: './tests'


  Lint:
    needs: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo & restore environment
        uses: ./.github/actions/checkout_repo_restore_env
        with:
          dependency-manager: 'uv'
      
      - name: Lint
        uses: ./.github/actions/lint
        with:
          folders-to-exclude: 'tests,.venv'
          ignore-failures: 'true'

       
  Docker_Build:
    needs: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Generate Docker Tag
        id: set_tag
        run: |
          # Get branch name and sanitise it
          BRANCH=$(echo "${{ github.ref_name || 'manual' }}" | sed 's/\//-/g')

          # Get current date
          DATE=$(date +'%Y-%m-%d')

          # Get short commit hash (fallback to workflow run ID for manual triggers)
          if [ "${{ github.sha }}" == "" ]; then
            SHORT_SHA="${{ github.run_id }}"
          else
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          fi

          # Combine them into the Docker tag
          TAG="${BRANCH}-${DATE}-${SHORT_SHA}"
          echo "Generated Tag: $TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Build and tag Docker image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --tag cicdtemplate/${{ matrix.service }}:${{ env.TAG }} \
            --file ./src/${{ matrix.service }}/Dockerfile \
            ./src/${{ matrix.service }} \
            --load
          docker save cicdtemplate/${{ matrix.service }}:${{ env.TAG }} -o ${{ matrix.service }}-${{ env.TAG }}.tar

      - name: Upload Image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-${{ env.TAG }}
          path: ${{ matrix.service }}-${{ env.TAG }}.tar
          if-no-files-found: ignore



          



