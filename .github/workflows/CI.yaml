# This workflow installs Python dependencies, runs tests, formats code,
# lints, and performs a limited security scan using Bandit.

name: CI/CD Template

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect Python Version
        id: detect-python
        run: |
          PYTHON_VER=""

          # Parse Python version from .python-version
          if [ -f .python-version ]; then
            PYTHON_VER=$(cat .python-version)

          # Parse Python version from pyproject.toml
          elif [ -f pyproject.toml ]; then
            PYTHON_VER=$(grep 'requires-python' pyproject.toml | head -1 | cut -d'"' -f2 | sed 's/>=//')

          # Parse Python version from Pipfile
          elif [ -f Pipfile ]; then 
            PYTHON_VER=$(grep 'python_version' Pipfile | head -1 | cut -d'"' -f2)

          # Raise error if no version found
          elif [ -z "$PYTHON_VER" ]; then 
            echo "Error: No Python version detected in .python-version, pyproject.toml or Pipfile"
            exit 1
          fi

          echo "Detected Python version: $PYTHON_VER"
          echo "PYTHON_VER=$PYTHON_VER" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VER }}

      - name: Install UV
        run: curl -LS https://astral.sh/uv/install.sh | sh

      - name: Install Dependencies 
        run: |
          # Dependencies will be installed system wide and not in a venv for simplicity

          # Parse dependencies from pyproject.toml
          if [ -f "pyproject.toml" ]; then
            echo "Installing from pyproject.toml"
            uv venv
            source .venv/bin/activate
            uv sync

          # Parse dependencies from Pipfile  
          elif [ -f "Pipfile" ]; then
            echo "Installing Pipenv"
            pip install pipenv

            echo "Installing from Pipfile"
            pipenv sync

          # Parse dependencies from requirements.txt  
          elif [ -f "requirements.txt" ]; then
            echo "Installing from requirements.txt"
            uv venv
            source .venv/bin/activate
            uv pip install -r requirements.txt

          else
            echo "Error: No dependency file found - expect one of pyproject.toml, Pipfile, or requirements.txt"
            exit 1
          fi

      - name: Install CI Dependencies
        run: |
          # Install dependencies for CI - Do not overwrite versions if already installed
          CI_PACKAGES="bandit black flake8 mypy pylint pytest pytest-cov"
          source .venv/bin/activate
          uv pip install $CI_PACKAGES

      - name: Run Tests
        run: |
          if [ -d "tests" ]; then
            source .venv/bin/activate
            pytest --cov=src ./tests -v --cov-report=html
          else
            echo "No /tests folder found - no tests will be run"
          fi

      - name: Upload Test Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage_report-${{ github.ref_name }}-${{ github.run_id}}
          #Test coverage is locally save on runner at htmlcov/
          path: htmlcov/

      - name: Run Bandit Scan
        run: |
          source .venv/bin/activate
          bandit -c bandit.yaml -r . -f html -o bandit_report.html || true

      - name: Upload Bandit Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit_report-${{ github.ref_name }}-${{ github.run_id}}.html
          #Test coverage is locally save on runner at htmlcov/
          path: bandit_report.html

      - name: Lint Code (Flake 8)
        run: |
          source .venv/bin/activate
          flake8 ./src --exit-zero

      - name: Lint Code (Pylint)
        run: |
          source .venv/bin/activate
          pylint ./src | tee pylint.log || true
          SCORE=$(grep "Your code has been rated at" pylint.log | awk '{print $7}' | cut -d'/' -f1)
          COLOR="red"
          if (( $(echo "$SCORE > 9" | bc -l) )); then
            COLOR="green"
          elif (( $(echo "$SCORE >7.5" | bc -l ) )); then
            COLOR="yellow"
          elif (( $(echo "$SCORE >6" | bc -l) )); then
            COLOR="orange"  
          elif (( $(echo "$SCORE <5" | bc -l) )); then
            COLOR="red"
          fi

          mkdir -p docs

          python -m pybadges \
          --left-text="pylint" \
          --right-text=$SCORE \
          --right-color=$COLOR \
          > ./docs/pylint-badge.svg

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -f ./docs/pylint-badge.svg
          git commit -m "Update pylint badge"
          git push
          



